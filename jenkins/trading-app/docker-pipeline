#!groovy

pipeline {
    agent any
    environment {
        /*dir on remote deployment host*/
        JENKINS_DATA = "/home/jenkins/jenkins-data"
        REMOTE_USER = "jenkins"
        REMOTE_IP = "195.133.24.65"

        CONTAINER_NAME = "trading-app"
        CONTAINER_VERSION = "1.0.0"

        /*java app parameters*/
        BYBIT_API_URL = "https://stream.bybit.com"
        CLICKHOUSE_DB = "fero_mt"
        CLICKHOUSE_HOST = "localhost"
        CLICKHOUSE_PORT = "8126"
    }
    parameters {
        booleanParam(name: 'COMPILE', defaultValue: true, description: 'Compile application')
        booleanParam(name: 'RUN_TEST', defaultValue: true, description: 'Run application tests')
    }
    tools {
        maven 'maven-3.9.9'
        dockerTool 'docker-27.3.1'
    }
    stages {
        stage ('Initialize') {
            steps {
                script {
                    sh '''
                    whoami
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                    mvn -v
                    java -version
                    docker info
                    '''
                }
            }
        }
        stage('Clone java repo') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        git url: 'https://github.com/fresh-fx59/pifagor-trading-hour-manipulation.git',
                                branch: 'main',
                                credentialsId: 'jenkins-repo-token-061025'
                    }
                }
            }
        }
        stage('MVN Compile') {
            when {
                expression { params.COMPILE }
            }
            steps {
                script {
                    dir("${WORKSPACE}") {
                        sh "mvn compile"
                    }
                }
            }
        }
        stage('MVN Test') {
            when {
                expression { params.RUN_TEST }
            }
            steps {
                script {
                    dir("${WORKSPACE}") {
                        sh "mvn test -Dorg.slf4j.simpleLogger.defaultLogLevel=error"
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    // Build the Docker image
                    sh 'docker build -f docker/trading-app/Dockerfile -t $CONTAINER_NAME:$CONTAINER_VERSION .'
                }
            }
        }
        stage('Transfer Image') {
            steps {
                script {
                    // Save the Docker image as a tar file
                    sh "docker save trading-app:1.0.0 -o ${CONTAINER_NAME}_v${CONTAINER_VERSION}.tar"

                    // Create folder if not exist
                    sh "ssh $REMOTE_USER@$REMOTE_IP 'mkdir -p $JENKINS_DATA'"

                    // Transfer the tar file to another server
                    sh "scp trading-app_v1.0.0.tar $REMOTE_USER@$REMOTE_IP:$JENKINS_DATA"
                }
            }
        }
        stage('Deploy on Remote Server') {
            steps {
                script {
                    withCredentials([
                            string(credentialsId: 'bybit-api-key-t1-prod', variable: 'BYBIT_API_KEY'),
                            string(credentialsId: 'bybit-secret-t1-prod', variable: 'BYBIT_API_SECRET'),
                            usernamePassword(credentialsId: 'clickhouse-cred-prod',
                                    passwordVariable: 'CLICKHOUSE_PASSWORD', usernameVariable: 'CLICKHOUSE_USER'),
                    ]) {
                        // Check if docker container is running, stop and remove it
                        sh "ssh ${SERVER_USER}@${SERVER_IP} << EOF \
                                # Check if the specific container is running \
                                if [ \\\$(docker ps -q -f name=$CONTAINER_NAME:$CONTAINER_VERSION) ]; then \
                                    echo \"Container $CONTAINER_NAME:$CONTAINER_VERSION is running. \
                                    # Stop the container\
                                    echo \"Stopping container $CONTAINER_NAME:$CONTAINER_VERSION... \
                                    docker stop $CONTAINER_NAME:$CONTAINER_VERSION \
                                    # Start the container\
                                    echo \"Removing container $CONTAINER_NAME:$CONTAINER_VERSION... \
                                    docker rm $CONTAINER_NAME:$CONTAINER_VERSION \
                                fi \
                                EOF"

                        // Load the image on the remote server and run it
                        sh "ssh $REMOTE_USER@$REMOTE_IP 'docker load -i $JENKINS_DATA/${CONTAINER_NAME}_v$CONTAINER_VERSION.tar \
                            && docker run \
                                --env BYBIT_API_KEY=$BYBIT_API_KEY \
                                --env BYBIT_API_SECRET=$BYBIT_API_SECRET \
                                --env BYBIT_API_URL=$BYBIT_API_URL \
                                --env CLICKHOUSE_USER=$CLICKHOUSE_USER \
                                --env CLICKHOUSE_PASSWORD=$CLICKHOUSE_PASSWORD \
                                --env CLICKHOUSE_DB=$CLICKHOUSE_DB \
                                --env CLICKHOUSE_HOST=$CLICKHOUSE_HOST \
                                --env CLICKHOUSE_PORT=$CLICKHOUSE_PORT \
                                -d $CONTAINER_NAME:$CONTAINER_VERSION'"
                    }
                }
            }
        }
    }
}